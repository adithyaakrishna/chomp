generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model User {
  id              String           @id
  isAdmin         Boolean          @default(false)
  wallets         Wallet[]
  emails          Email[]
  questionAnswers QuestionAnswer[]
  userDeck        UserDeck[]
  questionReveals QuestionReveal[]
}

model Wallet {
  address String @id
  userId  String
  user    User   @relation(fields: [userId], references: [id])
}

model Email {
  address String @id
  userId  String
  user    User   @relation(fields: [userId], references: [id])
}

model Question {
  id                  Int              @id @default(autoincrement())
  question            String
  durationMiliseconds BigInt?
  type                QuestionType
  revealToken         Token            @default(Bonk)
  revealTokenAmount   Int              @default(0)
  revealAtDate        DateTime?
  revealAtAnswerCount Int?
  questionOptions     QuestionOption[]
  questionTags        QuestionTag[]
  deckQuestions       DeckQuestion[]
  QuestionReveal      QuestionReveal[]
}

model QuestionOption {
  id             Int              @id @default(autoincrement())
  option         String
  isTrue         Boolean          @default(false)
  questionId     Int
  question       Question         @relation(fields: [questionId], references: [id])
  questionAnswer QuestionAnswer[]
}

model Tag {
  id           Int           @id @default(autoincrement())
  tag          String
  questionTags QuestionTag[]
}

model QuestionTag {
  id         Int      @id @default(autoincrement())
  tagId      Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
}

model Deck {
  id                  Int              @id @default(autoincrement())
  deck                String
  date                DateTime?
  revealAtDate        DateTime?
  revealAtAnswerCount Int?
  deckQuestions       DeckQuestion[]
  userDeck            UserDeck[]
  QuestionReveal      QuestionReveal[]
}

model UserDeck {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  deckId Int
  deck   Deck   @relation(fields: [deckId], references: [id])
}

model DeckQuestion {
  id         Int      @id @default(autoincrement())
  deckId     Int
  deck       Deck     @relation(fields: [deckId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
}

model QuestionAnswer {
  id               Int            @id @default(autoincrement())
  questionOptionId Int
  questionOption   QuestionOption @relation(fields: [questionOptionId], references: [id])
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  percentage       Int?
  selected         Boolean
}

model QuestionReveal {
  id         Int       @id @default(autoincrement())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  questionId Int?
  question   Question? @relation(fields: [questionId], references: [id])
  deckId     Int?
  deck       Deck?     @relation(fields: [deckId], references: [id])
}

enum QuestionType {
  TrueFalse
  YesNo
  MultiChoice
}

enum Token {
  Bonk
}
